// Generated by CoffeeScript 1.4.0
(function() {
  var GmetricWrapper, gmetricsrv,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  gmetricsrv = require('gmetric');

  /**
   * Gmetric wrapper
  */


  GmetricWrapper = (function() {

    function GmetricWrapper(host, port, spoof) {
      this.configure_gmetric = __bind(this.configure_gmetric, this);
      this.value_type = __bind(this.value_type, this);
      this.slope = __bind(this.slope, this);      this.counter_types = ['gauge, counter, derive, absolute'];
      this.typestrings = ['string', 'uint16', 'int16', 'uint32', 'int32', 'float', 'double'];
      this.gmetric = gmetricsrv;
      this.gmetric2 = gmetricsrv;
      this.configure_gmetric(host, port, spoof);
    }

    /**
     * Returns the integer lookup for the given slope type for gmetric.
     * @param {String} (name) The name of the slope type
     * @return {Integer} The integer representation of the name lookup
    */


    GmetricWrapper.prototype.slope = function(name) {
      var value_lookup;
      value_lookup = {
        '0': "zero",
        none: "zero",
        zero: "zero",
        positive: "positive",
        '1': "positive",
        negative: "negative",
        '-1': "negative",
        both: "both"
      };
      name = value_lookup[name.toString().toLowerCase()];
      if (name === void 0) {
        name = "unspecified";
      }
      return gmetricsrv["SLOPE_" + (name.toUpperCase())];
    };

    /**
     * Returns the integer lookup for the given data type for gmetric.
     * @param {String} (name) The name of the data type
     * @return {Integer} The integer representation of the name lookup
    */


    GmetricWrapper.prototype.value_type = function(name) {
      var value_lookup;
      value_lookup = {
        string: "string",
        ushrt: "unsigned_short",
        ushort: "unsigned_short",
        unsigned_short: "unsigned_short",
        uint16: "unsigned_short",
        short: "short",
        shrt: "short",
        int16: "short",
        uint: "unsigned_int",
        uint32: "unsigned_int",
        int: "int",
        int32: "int",
        float: "float",
        double: "double"
      };
      name = value_lookup[name.toString().toLowerCase()];
      if (name === void 0) {
        name = "unknown";
      }
      return gmetricsrv["VALUE_" + (name.toUpperCase())];
    };

    /**
     * Configures the gmetric service object.
     * @param {String} (host) The target gmond host
     * @param {String} (port) The target gmond port
     * @param {String} (spoof) 
     * @return {Object} The configured gmetric object
    */


    GmetricWrapper.prototype.configure_gmetric = function(host, port, spoof) {
      if (host && port && spoof) {
        this.gmetric.gmetric(host, port, spoof);
        console.log(this.gmetric);
        return console.log(this.gmetric2);
      }
    };

    return GmetricWrapper;

  })();

  module.exports = GmetricWrapper;

}).call(this);
