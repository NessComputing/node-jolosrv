// Generated by CoffeeScript 1.4.0
(function() {
  var Config, JolokiaSrv, async, gwrapper, jolokia,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jolokia = require('jolokia-client');

  async = require('async');

  Config = require('./config');

  gwrapper = require('./gmetric_wrapper');

  /**
   * Jolokia server client wrapper.
  */


  JolokiaSrv = (function() {

    function JolokiaSrv(interval) {
      this.interval = interval;
      this.submit_metrics = __bind(this.submit_metrics, this);
      this.stop_gmond = __bind(this.stop_gmond, this);
      this.start_gmond = __bind(this.start_gmond, this);
      this.info_all_clients = __bind(this.info_all_clients, this);
      this.info_client = __bind(this.info_client, this);
      this.remove_client = __bind(this.remove_client, this);
      this.list_clients = __bind(this.list_clients, this);
      this.remove_attributes = __bind(this.remove_attributes, this);
      this.add_client = __bind(this.add_client, this);
      this.interval || (this.interval = 15);
      this.jclients = new Object();
      this.gmond_interval_id = null;
      this.config = Config.get();
    }

    /**
     * Add a new jolokia lookup client into the hash.
     * @param {String} (name) The name of the client to add
     * @param {String} (url) The jolokia url for the client
     * @param {Object} (attributes) The attributes to lookup for the client
     * @return {Object} The jolokia client that was added
    */


    JolokiaSrv.prototype.add_client = function(name, url, attributes) {
      return this.jclients[name] = {
        client: new jolokia(url),
        attributes: attributes || new Object(),
        gw: new gwrapper(this.config.get('gmetric'), this.config.get('gPort'), true)
      };
    };

    /**
     * Removes all jolokia attributes for the given client group
     * @param {String} (name) The name of the client to remove attributes of
     * @param {String} (group) The name of the group to remove attributes of
    */


    JolokiaSrv.prototype.remove_attributes = function(name, group) {
      if (!this.jclients[name]) {
        return;
      }
      if (!this.jclients[name]['attributes'][group]) {
        return;
      }
      return delete this.jclients[name]['attributes'][group];
    };

    /**
     * List the current jolokia clients.
     * @return {Array} The list of current clients
    */


    JolokiaSrv.prototype.list_clients = function() {
      return Object.keys(this.jclients);
    };

    /**
     * Removes a jolokia client from the hash.
     * @param {String} (name) The name of the client to remove
     * @return {String} The list of remaining clients
    */


    JolokiaSrv.prototype.remove_client = function(name) {
      delete this.jclients[name];
      return this.list_clients();
    };

    /**
     * Returns detailed information for the given client.
     * @param {String} (name) The name of the client to lookup
     * @return {Object} The hash representing the client info
    */


    JolokiaSrv.prototype.info_client = function(name) {
      return this.jclients[name]['attributes'];
    };

    /**
     * Returns detailed information for all clients.
     * @return {Object} The hash representing the all client info
    */


    JolokiaSrv.prototype.info_all_clients = function() {
      var clients, key, _i, _len, _ref;
      clients = new Object();
      _ref = Object.keys(this.jclients);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        clients[key] = this.info_client(key);
      }
      return clients;
    };

    /**
     * Starts up the gmond metric spooler.
     * @param {String} (host) The target gmond host
     * @param {String} (port) The target gmond port
     * @param {Boolean} (spoof) Whether or not the hostname is spoofed
    */


    JolokiaSrv.prototype.start_gmond = function(host, port, spoof) {
      var _this = this;
      this.gmetric = new gmetricsrv();
      this.gmetric.gmetric(host, port, spoof);
      if (!this.interval) {
        return;
      }
      return this.gmond_interval_id = setInterval(function() {
        return _this.submit_metrics();
      }, this.interval);
    };

    /**
     * Stops the gmond metric spooler.
    */


    JolokiaSrv.prototype.stop_gmond = function() {
      if (this.gmond_interval_id) {
        return clearInterval(this.gmond_interval_id);
      }
    };

    /**
     * Submits gmetric data to the gmond target.
     * @param {Object} (ginfo) Where ginfo is the following:
     * ex:  { host:  'exhost.domain.com',
     *        name:  'mygraphname',
     *        units: 'percentage', 
     *        type:  'int',
     *        slope: 'both',
     *        tmax:   60,
     *        dmax:   120,
     *        group:  'mygraph_group' }
    */


    JolokiaSrv.prototype.submit_metrics = function(ginfo, value) {
      ginfo['tmax'] || (ginfo['tmax'] = 60);
      ginfo['dmax'] || (ginfo['dmax'] = 120);
      if (this.gmetric) {
        return this.gmetric.sendMetric();
      }
    };

    return JolokiaSrv;

  })();

  module.exports = JolokiaSrv;

}).call(this);
