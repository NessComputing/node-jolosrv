// Generated by CoffeeScript 1.4.0
(function() {
  var Config, Identity, JolokiaSrv, Logger, WebServer, express, generate_identity, http, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require('express');

  http = require('http');

  require('pkginfo')(module, 'name', 'version');

  Config = require('./config');

  Logger = require('./logger');

  _ref = require('./identity'), Identity = _ref.Identity, generate_identity = _ref.generate_identity;

  JolokiaSrv = require('./jolokiasrv');

  /**
   * The iOS-ota webserver class.
  */


  WebServer = (function() {

    function WebServer() {
      this.setup_routing = __bind(this.setup_routing, this);      this.config = Config.get();
      this.logger = Logger.get();
      this.identity = Identity.get();
      this.jsrv = new JolokiaSrv();
      this.app = express();
      this.app.use(express.bodyParser());
      this.app.use(this.errorHandler);
      this.setup_routing();
      this.srv = http.createServer(this.app);
      this.srv.listen(this.config.get('port'));
      this.logger.info("Webserver is up at: http://0.0.0.0:" + (this.config.get('port')));
    }

    WebServer.prototype.errorHandler = function(err, req, res, next) {
      res.status(500);
      return res.render('error', {
        error: err
      });
    };

    WebServer.prototype.setup_routing = function() {
      var _this = this;
      this.app.get('/', function(req, res, next) {
        return res.json(200, {
          name: exports.name,
          version: exports.version
        });
      });
      this.app.get('/favicon.ico', function(req, res, next) {
        return res.json(404, "No favicon exists.");
      });
      this.app.get('/clients', function(req, res, next) {
        if (__indexOf.call(req.query, "info") >= 0 && req.query.all === 'true') {
          return res.json(200, {
            clients: _this.jsrv.info_all_clients()
          });
        } else {
          return res.json(200, {
            clients: _this.jsrv.list_clients()
          });
        }
      });
      this.app.post('/clients', function(req, res, next) {
        var cl, client;
        client = req.body;
        if (!client.name) {
          return res.json(400, {
            error: "Adding or updating a client requires a name."
          });
        }
        if (!client.url) {
          return res.json(400, {
            error: "Adding or updating a client requires a jolokia url."
          });
        }
        cl = _this.jsrv.add_client(client.name, client.url, client.attributes);
        return res.json(200, {
          name: client.name,
          url: client.url,
          attributes: cl.attributes
        });
      });
      this.app.get('/clients/:client', function(req, res, next) {
        var client, data;
        client = req.params.client;
        data = _this.jsrv.info_client(client);
        return res.json(200, {
          message: "ok"
        });
      });
      return this.app.del('/clients/:client', function(req, res, next) {
        return res.json(200, {
          clients: _this.jsrv.remove_client(req.params.client)
        });
      });
    };

    return WebServer;

  })();

  module.exports = WebServer;

}).call(this);
